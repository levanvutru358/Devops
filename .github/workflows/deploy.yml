name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  CLIENT_DIR: client
  SERVER_PROJECT: server/EmoApi.csproj
  API_IMAGE: ${{ format('{0}/webshop-api', secrets.DOCKER_USERNAME) }}
  CLIENT_IMAGE: ${{ format('{0}/webshop-client', secrets.DOCKER_USERNAME) }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.CLIENT_DIR }}/package-lock.json

      - name: Install client dependencies
        working-directory: ${{ env.CLIENT_DIR }}
        run: npm ci

      - name: Build client bundle
        working-directory: ${{ env.CLIENT_DIR }}
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: npm run build

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore server dependencies
        run: dotnet restore ${{ env.SERVER_PROJECT }}

      - name: Build server
        run: dotnet build ${{ env.SERVER_PROJECT }} --configuration Release --no-restore

  publish:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.API_IMAGE }}:latest
            ${{ env.API_IMAGE }}:${{ github.sha }}

      - name: Build and push Client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL || 'http://localhost:5193' }}
          tags: |
            ${{ env.CLIENT_IMAGE }}:latest
            ${{ env.CLIENT_IMAGE }}:${{ github.sha }}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            set -euo pipefail
            cd ${{ secrets.DEPLOY_PATH }}
            git fetch --all --prune
            git reset --hard origin/main
            printf '%s\n' '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose pull
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose down --remove-orphans
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }} docker compose up -d
            docker image prune -f
            docker logout
