name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  CLIENT_DIR: client
  SERVER_PROJECT: server/EmoApi.csproj
  API_IMAGE: ${{ format('{0}/webshop-api', secrets.DOCKER_USERNAME) }}
  CLIENT_IMAGE: ${{ format('{0}/webshop-client', secrets.DOCKER_USERNAME) }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.CLIENT_DIR }}/package-lock.json

      - name: Install client dependencies
        working-directory: ${{ env.CLIENT_DIR }}
        run: npm ci

      - name: Build client bundle
        working-directory: ${{ env.CLIENT_DIR }}
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: npm run build

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore server dependencies
        run: dotnet restore ${{ env.SERVER_PROJECT }}

      - name: Build server
        run: dotnet build ${{ env.SERVER_PROJECT }} --configuration Release --no-restore

  publish:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          platforms: linux/amd64
          tags: |
            ${{ env.API_IMAGE }}:latest
            ${{ env.API_IMAGE }}:${{ github.sha }}

      - name: Build and push Client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          file: ./client/Dockerfile
          push: true
          platforms: linux/amd64
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL || 'http://localhost:5193' }}
          tags: |
            ${{ env.CLIENT_IMAGE }}:latest
            ${{ env.CLIENT_IMAGE }}:${{ github.sha }}

  deploy:
    needs: publish
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Validate deploy secrets (fail early)
        run: |
          [ -z "${{ secrets.SSH_HOST }}" ] && { echo "SSH_HOST empty"; exit 1; }
          [ -z "${{ secrets.SSH_USER }}" ] && { echo "SSH_USER empty"; exit 1; }
          [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ] && { echo "SSH_PRIVATE_KEY empty"; exit 1; }
          [ -z "${{ secrets.DOCKER_USERNAME }}" ] && { echo "DOCKER_USERNAME empty"; exit 1; }
          [ -z "${{ secrets.DOCKER_PASSWORD }}" ] && { echo "DOCKER_PASSWORD empty"; exit 1; }
          [ -z "${{ secrets.DOCKER_COMPOSE_FILE }}" ] && { echo "DOCKER_COMPOSE_FILE empty"; exit 1; }

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # port: ${{ secrets.SSH_PORT }}   # nếu SSH port != 22 thì thêm dòng này
          command_timeout: 10m
          script: |
            set -e

            # 1) Tạo/thay đổi thư mục deploy
            DEPLOY_DIR="${{ secrets.DEPLOY_PATH || '~\/Webshop' }}"
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            # 2) Ghi docker-compose.yml từ secret (giữ nguyên xuống dòng)
            cat > docker-compose.yml <<'EOF'
            ${{ secrets.DOCKER_COMPOSE_FILE }}
            EOF
            echo "[INFO] docker-compose.yml updated at $DEPLOY_DIR"

            # 3) (Tuỳ chọn) ghi .env nếu cần thêm biến (compose của bạn đã có default nên có thể bỏ qua)
            # cat > .env <<EOF
            # DOCKER_USERNAME=${DOCKER_USERNAME}
            # MYSQL_ROOT_PASSWORD=supersecretroot
            # MYSQL_DATABASE=emo_db
            # MYSQL_USER=tru123
            # MYSQL_PASSWORD=tru12345
            # ASPNETCORE_ENVIRONMENT=Production
            # JWT_ISSUER=EmoApi
            # JWT_AUDIENCE=EmoClient
            # JWT_SECRET=CHANGE_ME_SUPER_SECRET_MIN_32_CHARS_1234567
            # EOF

            # 4) Chọn docker compose CLI (docker compose vs docker-compose)
            if command -v docker-compose >/dev/null 2>&1; then DC="docker-compose"; else DC="docker compose"; fi

            # 5) Kiểm tra compose hợp lệ
            $DC config >/dev/null

            # 6) Login Docker Hub
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

            # 7) Pull image mới (truyền DOCKER_USERNAME qua env để resolve ${DOCKER_USERNAME} trong compose)
            DOCKER_USERNAME="${DOCKER_USERNAME}" $DC pull

            # 8) Khởi động stack (remove orphans)
            DOCKER_USERNAME="${DOCKER_USERNAME}" $DC up -d --remove-orphans

            # 9) Dọn ảnh cũ (không dùng)
            docker image prune -f || true

            echo "[INFO] Deploy finished."
