name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Docker Compose (v2)
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          version: latest

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Nếu docker-compose.yml của bạn có phần build cho service "backend" (hoặc các service khác),
      # lệnh build/push dưới sẽ dùng trực tiếp theo định nghĩa trong compose.
      - name: Build and push Docker images
        env:
          DOCKER_BUILDKIT: 1
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
          VITE_API_URL: ${{ secrets.CLIENT_API_URL }}
        run: |
          set -euo pipefail
          # Build images với BuildKit + inline cache (nếu Dockerfile hỗ trợ)
          docker-compose -f docker-compose.yml build --build-arg BUILDKIT_INLINE_CACHE=1
          # Push images (ví dụ service "backend"; thêm service khác nếu cần)
          docker-compose -f docker-compose.yml push api client

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          command_timeout: 15m
          script: |
            set -euo pipefail

            # Đi tới thư mục dự án (sửa lại nếu bạn dùng path khác)
            DEPLOY_DIR="${HOME}/LearnKing"
            mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            ls -la

            # Viết docker-compose.yml từ secret; dùng QUOTED HEREDOC để KHÔNG expand ${VAR} bên trong
            cat > docker-compose.yml <<'EOF'
            ${{ secrets.DOCKER_COMPOSE_FILE }}
            EOF

            echo "[INFO] docker-compose.yml written."

            # Chọn docker compose CLI khả dụng
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            # Verify docker-compose file (syntax)
            if ! $DC config >/dev/null; then
              echo "Error in Docker Compose file:"
              $DC config || true
              exit 1
            fi

            # Login Docker Hub
            echo "${DOCKER_PASSWORD}" | docker login -u "${DOCKER_USERNAME}" --password-stdin

            # Pull new images (cho mọi service trong compose có 'image:')
            DOCKER_USERNAME="${DOCKER_USERNAME}" $DC pull

            # Khởi động (tạo mới/cập nhật), remove-orphans để dọn service cũ không còn trong file
            DOCKER_USERNAME="${DOCKER_USERNAME}" $DC up -d --remove-orphans

            # Clean up old images (không dùng)
            docker image prune -f || true

            # Đợi service "Up" (tối đa 60s)
            SECS=0
            until $DC ps | grep -q "Up"; do
              echo "Waiting for containers to start..."
              sleep 5
              SECS=$((SECS+5))
              if [ $SECS -ge 60 ]; then
                echo "Timeout waiting for containers."
                $DC ps
                exit 1
              fi
            done

            echo "[INFO] Deploy done."

      - name: Cleanup
        if: always()
        run: |
          docker logout || true
          rm -rf /tmp/.buildx-cache || true



